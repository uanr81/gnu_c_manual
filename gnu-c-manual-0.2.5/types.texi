
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2007-2016 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.
@c author:tjr@gnu.org et al

@node Data Types
@chapter Типы Данных
@cindex data types
@cindex types

@menu
* Primitive Types::
* Enumerations::
* Unions::
* Structures::
* Arrays::
* Pointers::
* Incomplete Types::
* Type Qualifiers::
* Storage Class Specifiers::
* Renaming Types::
@end menu

@c ----------------------------------------------------------------------------
@node Primitive Types
@section Примитивные Типы Данных
@cindex primitive data types
@cindex data types, primitive
@cindex types, primitive

@menu
* Integer Types::
* Real Number Types::
* Complex Number Types::
@end menu

@node Integer Types
@subsection Целочисленные Типы
@cindex integer types
@cindex data types, integer
@cindex types, integer

Целочисленный тип данных имеет размер в диапазоне от, по меньшей мере, 8
битов, до по меньшей мере, 32 битов.  Стандарт C99 расширяет этот диапазон,
чтобы включать в себя целые числа, размеры которых, по меньшей мере, 64 бита.
Вы должны использовать целые типы для хранения значений целых чисел (и типа
данных @code{char} для хранения символов).  Минимальные размеры и диапазоны,
приведенны для этих типов; в зависимости от вашей компьютерной платформы, эти
размеры и диапазоны могут быть больше но никак не меньше.

В то время как эти диапазоны обеспечивают естественный порядок, стандарт не
требует, чтобы любые два типа имели различный диапазон.  Например, @code{int}
и @code{long} могут иметь один и тот же диапазон.  Стандарт позволяет даже
@code{signed char} и @code{long} иметь тот же диапазон, хотя такие платформы
очень необычны.

@itemize @bullet

@item @code{signed char}
@cindex @code{signed char} data type
@*
8-битный @code{signed char} тип данных может содержать целые значения в
диапазоне от @minus{}128 до 127.


@item @code{unsigned char}
@cindex @code{unsigned char} data type
@*
8-битный @code{unsigned char} тип данных может содержать целые значения в
диапазоне от 0 до 255.


@item @code{char}
@cindex @code{char} data type
@*
В зависимости от системы, тип данных @code{char} определяются как имеющий
один и тот же диапазон, либо @code{signed char}, либо @code{unsigned char}
типа данных (хотя это три различных типа, однако).  По соглашению, вы должны
использовать тип данных @code{char} специально для хранения ASCII символов
(например, @code{`m'}), в том числе управляющих последовательностей (таких
как @code{`\n'}).


@item @code{short int}
@cindex @code{short int} data type
@*
16-битный @code{short int} тип данных может содержать целые значения в
диапазоне от @minus{}32,768 до 32,767.  Вы можете также обратиться к этому
типу данных, как @code{short}, @code{signed short int}, или
@code{signed short}.

@item @code{unsigned short int}
@cindex @code{unsigned short int} data type
@*
16-битный @code{unsigned short int} тип данных может содержать целые значения
в диапазоне от 0 до 65,535.  Вы можете также обратиться к этому типу данных,
как к @code{unsigned short}.


@item @code{int}
@cindex @code{int} data type
@*
32-битный @code{int} тип данных может содержать целые значения в диапазоне от
@minus{}2,147,483,648 до 2,147,483,647.  Вы можете также обратиться к этому
типу данных, как к @code{signed int} или @code{signed}.

@item @code{unsigned int}
@cindex @code{unsigned int} data type
@*
32-битный @code{unsigned int} тип данных может содержать целые значения в
диапазоне от 0 до 4,294,967,295.  Вы можете также обратиться к этому типу
данных просто как к @code{unsigned}.


@item @code{long int}
@cindex @code{long int} data type
@*
32-битный @code{long int} тип данных может содержать целые значения в
диапазоне, по меньшей мере,  от @minus{}2,147,483,648 до 2,147,483,647.  (В
зависимости от вашей системы, этот тип данных может быть 64-бит, в этом
случае его диапазон идентичен типу @code{long long int} данных.).  Вы можете
также обратиться к этому типу данных, как к @code{long},
@code{signed long int}, или  к @code{signed long}.


@item @code{unsigned long int}
@cindex @code{unsigned long int} data type
@*
32-битный @code{unsigned long int} тип данных может содержать целые значения
в диапазоне, по меньшей мере, от 0 до 4,294,967,295.  (В зависимости от вашей
системы, этот тип данных может быть 64-бит, в этом случае его диапазон
идентичен типу @code{unsigned long long int} данных.).  Вы можете также
обратиться к этому типу данных, как к @code{unsigned long}.


@item @code{long long int}
@cindex @code{long long int} data type
@*
64-битный @code{long long int} тип данных может содержать целые значения в
диапазоне  от @w{@minus{}9,223,372,036,854,775,808} до
@w{9,223,372,036,854,775,807}.  Вы можете также обратиться к этому типу
данных, как к @code{long long}, @code{signed long long int} или
@code{signed long long}.  Этот тип не является частью C89, идёт как часть C99
и расширение GNU Cи.



@item @code{unsigned long long int}
@cindex @code{unsigned long long int} data type
@*
64-битный @code{unsigned long long int} тип данных может содержать целые
значения в диапазоне, по меньшей мере, от 0 до
@w{18,446,744,073,709,551,615}.  Вы можете также обратиться к этому типу
данных, как к @code{unsigned long long}.  Этот тип не является частью C89,
идёт как часть C99 и расширение GNU Cи.

@end itemize

Вот некоторые примеры объявления и определения целочисленных переменных:

@example
@group
int foo;
unsigned int bar = 42;
char quux = 'a';
@end group
@end example

@noindent
Первая строка объявляет целое с именем @code{foo}, но не определяет его
значение; оно остается не инициализированым, и его значение не следует
считать, как нечто конкретное.

@node Real Number Types
@subsection Типы Действительных Чисел
@cindex real number types
@cindex floating point types
@cindex data types, real number
@cindex data types, floating point
@cindex types, real number
@cindex types, floating point

Есть три типа данных, которые представляют дробные числа.  Хотя размеры и
диапазоны этих типов соответствуют в большинстве компьютерных систем,
используемых сегодня, исторически размеры этих типов варьируется от системы к
системе.  Таким образом, минимальные и максимальные значения сохраняются в
макроопределениях в библиотеке заголовочного файл @code{float.h}.  В этом
разделе, мы включаем имена макроопределений в месте их возможными значениями;
проверте @code{float.h} вашей системы для определенных чисел.

@itemize @bullet

@item @code{float}
@cindex @code{float} data type
@*
@code{float} тип данных является самым маленьким из трех типов с плавающей
точкой, если они различаются по размеру вообще.  Его минимальное значение
хранится в @code{FLT_MIN}, и не должно быть больше, чем @code{1e-37}.  Его
максимальное значение сохраняется в @code{FLT_MAX}, и должно быть не
менее @code{1e37}.


@item @code{double}
@cindex @code{double} data type
@*
@code{double} тип данных, по меньшей мере, столь же большой как и тип
@code{float}, но может быть большим.  Его минимальное значение хранится в
@code{DBL_MIN}, а его максимальное значение хранится в @code{DBL_MAX}.


@item @code{long double}
@cindex @code{long double} data type
@*
@code{long double} тип данных, по меньшей мере, столь же большой как и тип
@code{float}, и может быть большим.  Его минимальное значение хранится в
@code{LDBL_MIN}, а его максимальное значение хранится в @code{LDBL_MAX}.

@end itemize
@comment --Конец типов с плавающей точкой

@noindent
Все типы данных с плавающей запятой подписаны; пытаясь использовать
@code{unsigned float}, например, вызовет ошибку компиляции.

Вот некоторые примеры объявления и определения в переменных действительных
чисел:

@example
@group
float foo;
double bar = 114.3943;
@end group
@end example

@noindent
Первая строка объявляет переменную с типом чило с плавающей точкой и именем
@code{foo}, но не определяет её значение; она остается не инициализированой,
и её значение не следует учитывать как нечто конкретное.

Типы вещественного числа, представленные в Cи, являются числами с конечной
точностью, и, соответственно, не все действительные числа могут быть
представлены точно.  Большинство компьютерных систем, которые GCC
компилирует используют бинарное представление для действительных чисел,
которое не в состоянии точно представлять числа, такие, как, например, 4,2.
По этой причине, мы рекомендуем вам не сравнивать действительные числа для
точного равенства использовать оператор @code{==}, а проверить, что
действительные числа находятся в пределах допустимого отклонения.

Есть другие, более тонкие последствия этих неточных представлений; для
получения более подробной информации смотреть очерки бумаг Дэвида Голдберга
@cite{Что каждый компьютерный ученый должен знать о арифменике с плавающей
точкой} в секции 4.2.2 Дональда Кнута @cite{Искусство Компьютерного
Программирования}.


@node Complex Number Types
@subsection Типы Комплексные Числа
@cindex complex number types
@cindex data types, complex number
@cindex types, complex number

GCC ввел некоторые типы комплексных чисел как расширение C89.  Аналогичные
функции были введены в C99@footnote{C++ также имеет поддержку комплексных чисел, но она не совместима с типами ISO C99.}, но существует ряд отличий.
Сначала мы опишем стандартные типы комплексных чисел.

@menu
* Standard Complex Number Types::
* GNU Extensions for Complex Number Types::
@end menu

@node Standard Complex Number Types
@subsubsection Стандартные типы Комплексных Чисел
Комплексные типы были введены в C99.  Есть три комплексных типа:

@itemize @w{}
@item @code{float _Complex}
@item @code{double _Complex}
@item @code{long double _Complex}
@end itemize

Имена здесь начинаются с символом подчеркивания и заглавной буквой, чтобы
избежать конфликтов с идентификаторами уже существующих программ.
Стандартный файл заголовка @code{<complex.h>} C99 вводит некоторые
макросы, которые делают использование сложных типов проще.

@itemize @w{}
@item @code{complex}
@*
Расширяется до @code{_Complex}.  Это позволяет переменной быть объявленой
​​как @code{double complex}, что кажется более естественным.

@item @code{I}
@*
Константа типа @code{const float _Complex}, имеющая значение мнимой единицы
@math{i}.
@end itemize

@code{<complex.h>} заголовочный файл также объявляет ряд функций для
выполнения вычислений с комплексными числами, например, функциями
@code{creal} и @code{cimag} которые, соответственно, возвращают
действительные и мнимые части числа @code{double complex}.  Также
предусмотрены и другие функции, как показано в следующем примере:

@example
#include <complex.h>    
#include <stdio.h>  

void example (void) 
@{    
  complex double z = 1.0 + 3.0*I; 
  printf ("Phase is %f, modulus is %f\n", carg (z), cabs (z));        
@}  
@end example

@node GNU Extensions for Complex Number Types
@subsubsection GNU Расширение для Типов Комплексных Типов
GCC также введены комплексные типы, как расширение GNU для C89, но написание
отличается.  Комплексные типы с плавающей точкой в ​​расширении C89 GCC
являются:

@itemize @w{}
@item @code{__complex__ float}
@item @code{__complex__ double}
@item @code{__complex__ long double}
@end itemize

Расширение GCC' позволяет использовать комплексные типы, в отличии от типов
с плавающей точкой, для объявления целочисленных комплексных типов, так что
вы можете объявить комплексные символьные и комплексные целочисленные типы;
на самом деле @code{__complex__} может быть использован с любым из
примитивных типов данных.  Мы не дадим вам полный список всех возможностей,
но вот некоторые примеры:

@itemize @bullet

@item @code{__complex__ float}
@*
@code{__complex__ float} тип данных имеет два компонента: реальную часть и
мнимую часть, обе из которых относятся к типу данных @code{float}.


@item @code{__complex__ int}
@*
Тип данных @code{__complex__ int} также имеет два компонента: реальную часть
и мнимую часть, обе из которых относятся к типу данных @code{int}.

@end itemize
@comment --Конец списка типов __complex__

Для того, чтобы извлечь действительную часть комплексного числа, используйте
ключевое слово @code{__real__}, затем выражение.  Кроме того, используйте
@code{__imag__} чтобы извлечь мнимую часть.
 
@example
@group
__complex__ float a = 4 + 3i;

float b = __real__ a;          /* @r{@code{b} это 4.} */
float c = __imag__ a;          /* @r{@code{c} это 3.} */
@end group
@end example
 
Этот пример создает переменную @code{a} типа комплексное число с плавающей
точкой , и определяет её реальную часть, как 4 и мнимую часть, как 3.  Далее
действительная часть значения переменной присваивается переменной типа число
с плавающей точкой @code{b}, а мнимая часть этого значения, присваивается
переменной @code{c} типа числа с плавающей точкой.


@c --------------------------------------------------------------------------
@node Enumerations
@section Перечисления
@cindex enumerations
@cindex types, enumeration
@cindex data types, enumeration

Перечисление представляет собой тип пользовательских данных, используемый для
хранения постоянных целочисленных значений, и обращения к ним по именам.  По
умолчанию эти значения имеют тип @code{signed int}.  Однако, вы можете
использовать опцию компилятора GCC @code{-fshort-enums} для использования
типа наименьшего возможного числа, который будет использоваться вместо этого.
Оба эти поведения соответствуют стандарту C89, но смешанное использование
этих вариантов в рамках одной и той же программы может привести к
несовместимости.

@menu
* Defining Enumerations::       
* Declaring Enumerations::      
@end menu

@node Defining Enumerations
@subsection Определение Перечисления
@cindex defining enumerations
@cindex enumerations, defining

Определяется перечисление с помощью @code{enum} ключевого слова, за которым
следует имя перечисления (это необязательно), за которым следует список имен
констант (разделенных запятыми и заключены в фигурные скобки), и
заканчивается точкой с запятой.

@example
@group
enum фрукты @{виноград, вишня, лимон, киви@};
@end group
@end example

Этот пример определяет перечисление, @code{фрукты}, которое содержит четыре
постоянных целых значения, @code{виноград}, @code{вишня}, @code{лимон} и
@code{киви}, чьи значения по умолчанию, 0, 1, 2 и 3, соответственно.  Вы
также можете указать один или несколько значений в явном виде:

@example
@group
enum ешё_фрукты @{банан = -17, яблоко, черника, манго@};
@end group
@end example

Этот пример определяет @code{банан} как @minus{}17, а остальные значения
увеличиваются на 1: @code{яблоко} является @minus{}16, @code{черника}
является @minus{}15 и @code{манго} является @minus{}14.  Если не указано
иное, значение перечисления равно на один больше, чем предыдущее значение (и
первое значение по умолчанию равно 0).

Вы также можете обратиться к значению перечисления, определенное ранее в том
же перечислении:

@example
@group
enum вот_ещё_фрукты @{кумкват, малина, персик,
                     слива = персик + 2@};
@end group
@end example

В этом примере, @code{кумкват} устанавливается в 0, @code{малина} в 1,
@code{персик} в 2, и @code{слива} в 4.

Вы не можете использовать одно и тоже имя для перечисления @code{enum} как
@code{struct} или @code{union} в той же области.  (ВопросTypes439)

@node Declaring Enumerations
@subsection Объявление Перечисления
@cindex declaring enumerations
@cindex enumerations, declaring

Вы можете объявлять переменные типа перечисления как при определении
перечисления так и позже.  Этот пример объявляет одну переменную с именем
@code{мои_фрукты} типа @code{enum фрукты}, все в одном заявлении:

@example
@group
enum фрукты @{банан, яблоко, черника, манго@} мои_фрукты;
@end group
@end example

@noindent
в то время как в этом примере объявляется тип и переменная отдельно:

@example
@group
enum фрукты @{банан, яблоко, черника, манго@};
enum фрукты мои_фрукты;
@end group
@end example

(Конечно, вы не смогли бы объявить так, не объявив вначале перечисление
@code{фрукты}.)

Хотя такие переменные относятся к типу перечисления, вы можете присвоить им
любое значение, которое вы могли бы присвоить переменной типа  @code{int},
включая значение других перечислений.  Кроме того, любой переменной, которая
может быть назначено значение типа @code{int} может быть присвоено значение
из перечисления.

Тем не менее, вы не можете изменить значение в перечислении, как только оно
был определено; они являются константыми значениями.  Например, это не будет
работать:

@example
@group
enum фрукты @{банан, яблоко, черника, манго@};
банан = 15;  /* @r{Вы не можете сделать это!} */
@end group
@end example

Перечисления могут быть использованы в сочетании с оператором @code{switch},
потому что компилятор может предупредить вас, если вы не смогли обработать
одно из значений перечисления.  Используя пример выше, если ваш код
обрабатывает только @code{банан}, @code{яблоко} и @code{манго}, без
@code{черника}, GCC может генерировать предупреждение.

@c ----------------------------------------------------------------------------
@node Unions
@section Unions
@cindex unions
@cindex types, union
@cindex data types, union

Объединение представляет собой тип пользовательских данных, используемый для
хранения нескольких переменных в одном и том же пространстве памяти.  Хотя вы
можете получить доступ к любой из этих переменных в любое время, вы должны
читать только по одной из них в одно и то же время --- присвоения одного
значения перезаписывает значения другой.  (ВопросTypes503)


@menu
* Defining Unions::             
* Declaring Union Variables::   
* Accessing Union Members::     
* Size of Unions::              
@end menu

@node Defining Unions
@subsection Определение Объединения
@cindex defining unions
@cindex unions, defining

Вы определяете объединение, используя ключевое слово @code{union} с
последующим объявлением элементов объединения, заключенные в фигурные скобки.
Вы объявляете каждый элемент объединения так же, как вы обычно объявляете
переменную --- используя тип, данных за которым следует одно или несколько
имён переменных, разделенных запятыми, и заканчиваете точкой с запятой.
Затем заканчиваете определение объединения точкой с запятой после закрывающей
скобки.

Вы должны также включить имя для объединения между @code{union} ключевым
словом и открывающей скобкой.  Это синтаксически не обязательно, но если вы
не укажите имя, вы не можете обратиться к этому типу данных объединения в
дальнейшем в программе (без @code{typedef}, @pxref{The typedef Statement}).

Ниже приведен пример определения простого объединения для сохранения целого
числа и числа с плавающей точкой:

@example
@group
union числа
  @{
    int i;
    float f;
  @};
@end group
@end example

Это определяет объединение с именем @code{числа}, которое содержит два
элементачлена, @code{i} и @code{f}, которые имеют тип @code{int} и
@code{float} соответственно.


@node Declaring Union Variables
@subsection Объявление Переменных Объединения
@cindex declaring union variables
@cindex union variables, declaring

Вы можете объявлять переменные типа объединения, как при первоначальном
определении объединения, так и после его определения, если вы дали
объединению имя.

@menu
* Declaring Union Variables at Definition::  
* Declaring Union Variables After Definition::  
* Initializing Union Members::   
@end menu

@node Declaring Union Variables at Definition
@subsubsection Объявление Переменных Объединения при Определении
@cindex declaring union variables at definition
@cindex union variables, declaring at definition

Вы можете объявлять переменные типа объединения, когда вы определяете тип
объединения, помещая имена переменных после закрывающей скобки определения
объединения, но до завершающей точки с запятой.  Вы можете объявить более чем
одну такую ​​переменную, разделяя их запятыми.

@example
@group
union числа
  @{
    int i;
    float f;
  @} первое_число, второе_число;
@end group
@end example

Этот пример объявляет две переменные типа @code{union числа},
@code{первое_число} и @code{второе_число}.



@node Declaring Union Variables After Definition
@subsubsection Объявление Переменных Объединения После его Определения
@cindex declaring union variables after definition
@cindex union variables, declaring after definition

Вы можете объявлять переменные типа объединение после того, как вы
определили объединение, используя @code{union} ключевое слово и имя, которое
вы задали типу объединения, за которым следует одно или несколько имен
переменных, разделенных запятыми.


@example
@group
union числа
  @{
    int i;
    float f;
  @};
union числа первое_число, второе_число;
@end group
@end example

Этот пример объявляет две переменные типа @code{union числа},
@code{первое_число} и @code{второе_число}.


@node Initializing Union Members
@subsubsection Инициализация Членов Объединения
@cindex initializing union members
@cindex union members, initializing

Вы можете инициализировать первый элемент переменной объявления при его
объявлении:

@example
@group
union числа
  @{
    int i;
    float f;
  @};
union числа первое_число = @{ 5 @};
@end group
@end example

В этом примере элемент @code{i} в переменной @code{первое_число} получает
значение 5, а элемент @code{f} остаётся с недействительным значением.

Другой способ инициализации элемента объединения - это явно указать имя
нужного элемента для инициализации.  Таким образом, вы можете
инициализировать тот элемент который хотите, а не только первый.  Есть два
способа, которые можно использовать --- либо имя элемента с двоеточием, а
затем его значение, например:

@example
@group
union числа первое_число = @{ f: 3.14159 @};
@end group
@end example

@noindent
или предварить имя элемента объединения точкой и присвоить ему значение с
помощью оператора присваивания, как здесь:

@example
@group
union числа первое_число = @{ .f = 3.14159 @};
@end group
@end example

Вы также можете инициализировать элемент объединения при объявлении
переменной объединения во время её определения:

@example
@group
union числа
  @{
    int i;
    float f;
  @} первое_число = @{ 5 @};
@end group
@end example



@node Accessing Union Members
@subsection Доступ к Элементам Объединения
@cindex accessing union members
@cindex union members, accessing

Вы можете получить доступ к элементам переменной объединения с помощью
оператора доступа к элементу.  Вы помещаете имя переменной объединения на
левой стороне оператора, а имя элемента объединения с правой стороны.

@example
@group
union числа
  @{
    int i;
    float f;
  @};
union числа первое_число;
первое_число.i = 5;
первое_число.f = 3.9;
@end group
@end example

Обратите внимание, в этом примере, что переопределяются значения как элемента
@code{f} так и хранящееся в элементе @code{i}.  (ВопросTypes697)

@c Если элемент объединения доступен после того, как значение было сохранено
@c в другом элементе, поведение определяется реализацией, но этот документ не
@c определяет поведение. Существует исключение
@c хотя: если два члена являются структурами, и они имеют общую исходную
@c последовательность.

@node Size of Unions
@subsection Размер Объединений
@cindex size of unions
@cindex unions, size of

Размер объединения равен размеру его наибольшего элемента.  Рассмотрим первый
пример объединения из этого раздела:

@example
@group
union числа
  @{
    int i;
    float f;
  @};
@end group
@end example

@noindent Размер типа данных этого объединения такой же, как при определении
@code{sizeof (float)}, так самый большой тип у элементов этого объединения
это @code{float}.  Поскольку все элементы объединения расположены в одном
и том же пространстве памяти, размер типа данных объединения, не должен
расчитываться на возможность помещения суммы сразу всех типов элементов, а
должен быть достаточно большим, чтобы вместить самый большой из типов
содержащихся элементов. (ВопросTypes729)


@c ----------------------------------------------------------------------------
@node Structures
@section Structures
@cindex structures
@cindex types, structure
@cindex data types, structure

A structure is a programmer-defined data type made up of
variables of other data types (possibly including other structure types).

@menu
* Defining Structures::         
* Declaring Structure Variables::  
* Accessing Structure Members::  
* Bit Fields::                  
* Size of Structures::          
@end menu

@node Defining Structures
@subsection Defining Structures
@cindex defining structures
@cindex structures, defining

You define a structure using the @code{struct} keyword followed by
the declarations of the structure's members, enclosed in
braces.  You declare each member of a structure just as you would
normally declare a variable---using the data type followed by one
or more variable names separated by commas, and ending with a
semicolon.  Then end the structure definition with a semicolon after
the closing brace.

You should also include a name for the structure in between the
@code{struct} keyword and the opening brace.  This is optional, but if
you leave it out, you can't refer to that structure data type later
on (without a @code{typedef}, @pxref{The typedef Statement}).

Here is an example of defining a simple structure for holding the
X and Y coordinates of a point:

@example
@group
struct point
  @{
    int x, y;
  @};
@end group
@end example

That defines a structure type named @code{struct point}, which contains two
members, @code{x} and @code{y}, both of which are of type @code{int}.

Structures (and unions) may contain instances of other structures and
unions, but of course not themselves.  It is possible for a structure
or union type to contain a field which is a pointer to the same type
(@pxref{Incomplete Types}).

@node Declaring Structure Variables
@subsection Declaring Structure Variables
@cindex declaring structure variables
@cindex structure variables, declaring

You can declare variables of a structure type when both you initially
define the structure and after the definition, provided you gave the
structure type a name.


@menu
* Declaring Structure Variables at Definition::  
* Declaring Structure Variables After Definition::  
* Initializing Structure Members::  
@end menu

@node Declaring Structure Variables at Definition
@subsubsection Declaring Structure Variables at Definition
@cindex declaring structure variables at definition
@cindex structure variables, declaring at definition

You can declare variables of a structure type when you define the
structure type by putting the variable names after the closing
brace of the structure definition, but before the final semicolon.
You can declare more than one such variable by separating the names
with commas.

@example
@group
struct point
  @{
    int x, y;
  @} first_point, second_point;
@end group
@end example

That example declares two variables of type @code{struct point},
@code{first_point} and @code{second_point}.



@node Declaring Structure Variables After Definition
@subsubsection Declaring Structure Variables After Definition
@cindex declaring structure variables after definition
@cindex structure variables, declaring after definition

You can declare variables of a structure type after defining the
structure by using the @code{struct} keyword and the name you
gave the structure type, followed by one or more variable names
separated by commas.


@example
@group
struct point
  @{
    int x, y;
  @};
struct point first_point, second_point;
@end group
@end example

That example declares two variables of type @code{struct point},
@code{first_point} and @code{second_point}.


@node Initializing Structure Members
@subsubsection Initializing Structure Members
@cindex initializing structure members
@cindex structure members, initializing

You can initialize the members of a structure type to have certain
values when you declare structure variables.  

If you do not initialize a structure variable, the effect depends on
whether it has static storage (@pxref{Storage Class Specifiers}) or
not.  If it is, members with integral types are initialized with 0 and
pointer members are initialized to NULL; otherwise, the value of the
structure's members is indeterminate.

One way to initialize a structure is to specify the values in a set of
braces and separated by commas.  Those values are assigned to the
structure members in the same order that the members are declared in
the structure in definition.


@example
@group
struct point
  @{
    int x, y;
  @};
struct point first_point = @{ 5, 10 @};
@end group
@end example

In that example, the @code{x} member of @code{first_point} gets the
value 5, and the @code{y} member gets the value 10.

Another way to initialize the members is to specify the name of the
member to initialize.  This way, you can initialize the members in
any order you like, and even leave some of them uninitialized.  There
are two methods that you can use.  The first method is available in
C99 and as a C89 extension in GCC:

@example
@group
struct point first_point = @{ .y = 10, .x = 5 @};
@end group
@end example

You can also omit the period and use a colon instead of @samp{=},
though this is a GNU C extension:

@example
@group
struct point first_point = @{ y: 10, x: 5 @};
@end group
@end example

You can also initialize the structure variable's members when you declare
the variable during the structure definition:

@example
@group
struct point
  @{
    int x, y;
  @} first_point = @{ 5, 10 @};
@end group
@end example

You can also initialize fewer than all of a structure variable's members:

@example
@group
struct pointy
  @{
    int x, y;
    char *p;
  @};
struct pointy first_pointy = @{ 5 @};
@end group
@end example

Here, @code{x} is initialized with 5, @code{y} is initialized with 0,
and @code{p} is initialized with NULL.  The rule here is that @code{y}
and @code{p} are initialized just as they would be if they were static
variables.
@c See ANSI C89, sec 6.5.7, ``Initialization''.


Here is another example that initializes a structure's members which
are structure variables themselves:

@example
@group
struct point
  @{
    int x, y;
  @};

struct rectangle
  @{
    struct point top_left, bottom_right;
  @};

struct rectangle my_rectangle = @{ @{0, 5@}, @{10, 0@} @};
@end group
@end example

That example defines the @code{rectangle} structure to consist of
two @code{point} structure variables.  Then it declares one variable
of type @code{struct rectangle} and initializes its members.  Since
its members are structure variables, we used an extra set of braces
surrounding the members that belong to the @code{point} structure
variables.  However, those extra braces are not necessary; they just
make the code easier to read.



@node Accessing Structure Members
@subsection Accessing Structure Members
@cindex accessing structure members
@cindex structure members, accessing

You can access the members of a structure variable using the member
access operator.  You put the name of the structure
variable on the left side of the operator, and the name of the
member on the right side.

@example
@group
struct point
  @{
    int x, y;
  @};

struct point first_point;

first_point.x = 0;
first_point.y = 5;
@end group
@end example

You can also access the members of a structure variable which is itself a
member of a structure variable.

@example
@group
struct rectangle
  @{
    struct point top_left, bottom_right;
  @};

struct rectangle my_rectangle;

my_rectangle.top_left.x = 0;
my_rectangle.top_left.y = 5;

my_rectangle.bottom_right.x = 10;
my_rectangle.bottom_right.y = 0;
@end group
@end example



@node Bit Fields
@subsection Bit Fields
@cindex bit fields
@cindex fields, bit

You can create structures with integer members of nonstandard sizes, called
@emph{bit fields}.  You do this by specifying an integer (@code{int},
@code{char}, @code{long int}, etc.@:) member as usual, and inserting a colon
and the number of bits that the member should occupy in between the
member's name and the semicolon.

@example
@group
struct card
  @{
    unsigned int suit : 2;
    unsigned int face_value : 4;
  @};
@end group
@end example

That example defines a structure type with two bit fields, @code{suit} and
@code{face_value}, which take up 2 bits and 4 bits, respectively.  @code{suit}
can hold values from 0 to 3, and @code{face_value} can hold values from 0 to
15.  Notice that these bit fields were declared as @code{unsigned int}; had
they been signed integers, then their ranges would have been from
@minus{}2 to 1, and from @minus{}8 to 7, respectively.

More generally, the range of an unsigned bit field of @math{N} bits is from
0 to @math{2^N - 1}, and the range of a signed bit field of @math{N}
bits is from @math{-(2^N) / 2} to @math{((2^N) / 2) - 1}.

@c ??? Want to research this further...

@c Avoid using signed bitfields of size 1, since the interpretation of
@c that single bit (that is, whether it is a sign bit or not) is
@c implementation-defined.  GCC implements it as a sign bit.

@c @c @c At least it does on the platform I tried.  Unsure about other platforms.

Bit fields can be specified without a name in order to control which
actual bits within the containing unit are used.  However,
the effect of this is not very portable and it is rarely useful.
You can also specify a bit field of size 0, which indicates that
subsequent bit fields not further bit fields should be packed into the
unit containing the previous bit field.  This is likewise not
generally useful.

You may not take the address of a bit field with the address
operator @code{&} (@pxref{Pointer Operators}).

@node Size of Structures
@subsection Size of Structures
@cindex size of structures
@cindex structures, size of

The size of a structure type is equal to the sum of the size of all of its
members, possibly including padding to cause the structure type to align to
a particular byte boundary.  The details vary depending on your computer
platform, but it would not be atypical to see structures padded to align
on four- or eight-byte boundaries.  This is done in order to speed up
memory accesses of instances of the structure type.

As a GNU extension, GCC allows structures with no members.  Such structures
have zero size.

If you wish to explicitly omit padding from your structure types (which may,
in turn, decrease the speed of structure memory accesses), then GCC provides
multiple methods of turning packing off.  The quick and easy method is to
use the @code{-fpack-struct} compiler option.  For more details on omitting
packing, please see the GCC manual which corresponds to your version of the
compiler.

@c ----------------------------------------------------------------------------
@node Arrays
@section Arrays
@cindex arrays
@cindex types, array
@cindex data types, array

An array is a data structure that lets you store one or more elements
consecutively in memory.  In C, array elements are indexed beginning at
position zero, not one.

@menu
* Declaring Arrays::
* Initializing Arrays::
* Accessing Array Elements::
* Multidimensional Arrays::
* Arrays as Strings::
* Arrays of Unions::
* Arrays of Structures::
@end menu


@node Declaring Arrays
@subsection Declaring Arrays
@cindex declaring arrays
@cindex arrays, declaring

You declare an array by specifying the data type for its elements, its name,
and the number of elements it can store.  Here is an example that declares
an array that can store ten integers:

@example
@group
int my_array[10];
@end group
@end example


For standard C code, the number of elements in an array must be positive.

As a GNU extension, the number of elements can be as small as zero.
Zero-length arrays are useful as the last element of a structure which is
really a header for a variable-length object:

@example
@group
struct line
@{
  int length;
  char contents[0];
@};

@{
  struct line *this_line = (struct line *)
    malloc (sizeof (struct line) + this_length);
  this_line -> length = this_length;
@}
@end group
@end example

Another GNU extension allows you to declare an array size using
variables, rather than only constants.  For example, here is a function definition
that declares an array using its parameter as the number of elements:

@example
@group
int
my_function (int number)
@{
  int my_array[number];
  @dots{};
@}
@end group
@end example


@node Initializing Arrays
@subsection Initializing Arrays
@cindex initializing arrays
@cindex arrays, initializing

You can initialize the elements in an array when you declare it by listing
the initializing values, separated by commas, in a set of braces.  Here
is an example:

@example
@group
int my_array[5] = @{ 0, 1, 2, 3, 4 @};
@end group
@end example

You don't have to explicitly initialize all of the array elements.  For example, this code
initializes the first three elements as specified, and then initializes the last two
elements to a default value of zero:

@example
@group
int my_array[5] = @{ 0, 1, 2 @};
@end group
@end example

When using either ISO C99, or C89 with GNU extensions, you can initialize array
elements out of order, by specifying which array indices to initialize.  To do
this, include the array index in brackets, and optionally the assignment operator,
before the value.  Here is an example:

@example
@group
int my_array[5] = @{ [2] 5, [4] 9 @};
@end group
@end example
@c
@noindent
Or, using the assignment operator:

@example
@group
int my_array[5] = @{ [2] = 5, [4] = 9 @};
@end group
@end example

@noindent
Both of those examples are equivalent to:

@example
int my_array[5] = @{ 0, 0, 5, 0, 9 @};
@end example


When using GNU extensions, you can initialize a range of elements to
the same value, by specifying the first and last indices, in the form
@code{ [@var{first}] ... [@var{last}] }.  Here is an example:

@example
@group
int new_array[100] = @{ [0 ... 9] = 1, [10 ... 98] = 2, 3 @};
@end group
@end example

That initializes elements 0 through 9 to 1, elements 10 through 98
to 2, and element 99 to 3.  (You also could explicitly write
@code{[99] = 3}.)  Also, notice that you @emph{must} have spaces on both
sides of the @samp{...}.

If you initialize every element of an array, then you do not have to
specify its size; its size is determined by the number of elements you
initialize.  Here is an example:

@example
@group
int my_array[] = @{ 0, 1, 2, 3, 4 @};
@end group
@end example

Although this does not explicitly state that the array has five elements
using @code{my_array[5]}, it initializes five elements, so that is how many
it has.

Alternately, if you specify which elements to initialize, then the size of
the array is equal to the highest element number initialized, plus one.
For example:

@example
@group
int my_array[] = @{ 0, 1, 2, [99] = 99 @};
@end group
@end example

In that example, only four elements are initialized, but the last one
initialized is element number 99, so there are 100 elements.


@node Accessing Array Elements
@subsection Accessing Array Elements
@cindex accessing array elements
@cindex array elements, accessing

You can access the elements of an array by specifying the array name,
followed by the element index, enclosed in brackets.  Remember that the array
elements are numbered starting with zero.  Here is an example:

@example
@group
my_array[0] = 5;
@end group
@end example

That assigns the value 5 to the first element in the array, at position
zero.  You can treat individual array elements like variables of whatever
data type the array is made up of.  For example, if you have an array made
of a structure data type, you can access the structure elements like this:

@example
@group
struct point
@{
  int x, y;
@};
struct point point_array[2] = @{ @{4, 5@}, @{8, 9@} @};
point_array[0].x = 3;
@end group
@end example



@node Multidimensional Arrays
@subsection Multidimensional Arrays
@cindex multidimensional arrays
@cindex arrays, multidimensional

You can make multidimensional arrays, or ``arrays of arrays''.
You do this by adding an extra set of brackets and array lengths for every
additional dimension you want your array to have.  For example, here is
a declaration for a two-dimensional array that holds five elements in each
dimension (a two-element array consisting of five-element arrays):

@example
@group
int two_dimensions[2][5] @{ @{1, 2, 3, 4, 5@}, @{6, 7, 8, 9, 10@} @};
@end group
@end example

Multidimensional array elements are accessed by specifying the desired index
of both dimensions:

@example
@group
two_dimensions[1][3] = 12;
@end group
@end example

In our example, @code{two_dimensions[0]} is itself an array.  The
element @code{two_dimensions[0][2]} is followed by
@code{two_dimensions[0][3]}, not by @code{two_dimensions[1][2]}.

@node Arrays as Strings
@subsection Arrays as Strings
@cindex arrays as strings
@cindex strings, arrays as

You can use an array of characters to hold a string (@pxref{String Constants}).
The array may be built of either signed or unsigned characters.

@cindex string arrays, declaring
@cindex declaring string arrays
When you declare the array, you can specify the number of elements it will
have.  That number will be the maximum number of characters that should be
in the string, including the null character used to end the string.  If you
choose this option, then you do not have to initialize the array when you
declare it.  Alternately, you can simply initialize the array to a value,
and its size will then be exactly large enough to hold whatever string you
used to initialize it.

@cindex string arrays, initializing
@cindex initializing string arrays
There are two different ways to initialize the array.  You can specify of
comma-delimited list of characters enclosed in braces, or you can specify a
string literal enclosed in double quotation marks.

Here are some examples:

@example
@group
char blue[26];
char yellow[26] = @{'y', 'e', 'l', 'l', 'o', 'w', '\0'@};
char orange[26] = "orange";
char gray[] = @{'g', 'r', 'a', 'y', '\0'@};
char salmon[] = "salmon";
@end group
@end example

In each of these cases, the null character @code{\0} is included at the
end of the string, even when not explicitly stated.   (Note that if you
initialize a string using an array of individual characters, then the
null character is @emph{not} guaranteed to be present.  It might be,
but such an occurrence would be one of chance, and should not be relied
upon.)


After initialization, you cannot assign a new string literal to an array
using the assignment operator.  For example, this
@emph{will not work}:

@example
@group
char lemon[26] = "custard";
lemon = "steak sauce";      /* @r{Fails!} */
@end group
@end example

@noindent
However, there are functions in the GNU C library that perform operations
(including copy) on string arrays.  You can also change one character at
a time, by accessing individual string elements as you would any other
array:

@example
@group
char name[] = "bob";
name[0] = 'r';
@end group
@end example

It is possible for you to explicitly state the number of elements in the
array, and then initialize it using a string that has more characters than
there are elements in the array.  This is not a good thing.  The larger string
will @emph{not} override the previously specified size of the array, and you
will get a compile-time warning.  Since the original array size remains, any
part of the string that exceeds that original size is being written to a memory
location that was not allocated for it.


@node Arrays of Unions
@subsection Arrays of Unions
@cindex arrays of unions
@cindex unions, arrays of

You can create an array of a union type just as you can an array
of a primitive data type.

@example
@group
union numbers
  @{
    int i;
    float f;
  @};
union numbers number_array [3];
@end group
@end example

That example creates a 3-element array of @code{union numbers}
variables called @code{number_array}.  You can also initialize the
first members of the elements of a number array:

@example
@group
union numbers number_array [3] = @{ @{3@}, @{4@}, @{5@} @};
@end group
@end example

@noindent The additional inner grouping braces are optional.

After initialization, you can still access the union members in the
array using the member access operator.  You put the array name and
element number (enclosed in brackets) to the left of the operator, and
the member name to the right.

@example
@group
union numbers number_array [3];
number_array[0].i = 2;
@end group
@end example

@node Arrays of Structures
@subsection Arrays of Structures
@cindex arrays of structures
@cindex structures, arrays of

You can create an array of a structure type just as you can an array
of a primitive data type.

@example
@group
struct point
  @{
    int x, y;
  @};
struct point point_array [3];
@end group
@end example

That example creates a 3-element array of @code{struct point}
variables called @code{point_array}.  You can also initialize the
elements of a structure array:

@example
@group
struct point point_array [3] = @{ @{2, 3@}, @{4, 5@}, @{6, 7@} @};
@end group
@end example

As with initializing structures which contain structure members, the
additional inner grouping braces are optional.  But, if you use the
additional braces, then you can partially initialize some of the
structures in the array, and fully initialize others:

@example
@group
struct point point_array [3] = @{ @{2@}, @{4, 5@}, @{6, 7@} @};
@end group
@end example

In that example, the first element of the array has only its @code{x}
member initialized.  Because of the grouping braces, the value 4 is
assigned to the @code{x} member of the second array element,
@emph{not} to the @code{y} member of the first element, as would be
the case without the grouping braces.

After initialization, you can still access the structure members in the
array using the member access operator.  You put the array name and
element number (enclosed in brackets) to the left of the operator, and
the member name to the right.

@example
@group
struct point point_array [3];
point_array[0].x = 2;
point_array[0].y = 3;
@end group
@end example

@c ----------------------------------------------------------------------------
@node Pointers
@section Pointers
@cindex pointers
@cindex types, pointer
@cindex data types, pointer

Pointers hold memory addresses of stored constants or variables.  For
any data type, including both primitive types and custom types, you
can create a pointer that holds the memory address of an instance of
that type.

@menu
* Declaring Pointers::
* Initializing Pointers::
* Pointers to Unions::
* Pointers to Structures::
@end menu

@node Declaring Pointers
@subsection Declaring Pointers
@cindex declaring pointers
@cindex pointers, declaring

You declare a pointer by specifying a name for it and a data type.
The data type indicates of what type of variable the pointer will
hold memory addresses.

To declare a pointer, include the indirection
operator (@pxref{Pointer Operators}) before 
the identifier.  Here is the general form of a pointer declaration:

@example
@var{data-type} * @var{name};
@end example

@noindent
White space is not significant around the indirection operator:

@example
@group
@var{data-type} *@var{name};
@var{data-type}* @var{name};
@end group
@end example

Here is an example of declaring a pointer to hold the address of
an @code{int} variable:

@example
@group
int *ip;
@end group
@end example

Be careful, though:  when declaring multiple pointers in the same statement, you must
explicitly declare each as a pointer, using the indirection operator:

@example
@group
int *foo, *bar;  /* @r{Two pointers.} */
int *baz, quux;   /* @r{A pointer and an integer variable.} */
@end group
@end example


@node Initializing Pointers
@subsection Initializing Pointers
@cindex initializing pointers
@cindex pointers, initializing

You can initialize a pointer when you first declare it by specifying
a variable address to store in it.  For example, the following code
declares an @code{int} variable @samp{i}, and a pointer which is
initialized with the address of @samp{i}:

@example
@group
int i;
int *ip = &i;
@end group
@end example

Note the use of the address operator (@pxref{Pointer Operators}), used
to get the memory address of a variable.  After you declare a pointer, you
do @emph{not} use the indirection operator with the pointer's name when
assigning it a new address to point to.  On the contrary, that would change
the value of the variable that the points to, not the value of the pointer
itself.  For example:

@example
@group
int i, j;
int *ip = &i;  /* @r{@samp{ip} now holds the address of @samp{i}.} */
ip = &j;       /* @r{@samp{ip} now holds the address of @samp{j}.} */
*ip = &i;      /* @r{@samp{j} now holds the address of @samp{i}.} */
@end group
@end example

The value stored in a pointer is an integral number: a location within
the computer's memory space.  If you are so inclined, you can assign pointer
values explicitly using literal integers, casting them to the appropriate
pointer type.  However, we do not recommend this practice unless you need
to have extremely fine-tuned control over what is stored in memory, and you
know exactly what you are doing.  It would be all too easy to accidentally
overwrite something that you did not intend to.   Most uses of this
technique are also non-portable.

It is important to note that if you do not initialize a pointer with
the address of some other existing object, it points nowhere in
particular and will likely make your program crash if you use it
(formally, this kind of thing is called @dfn{undefined behavior}).

@node Pointers to Unions
@subsection Pointers to Unions
@cindex pointers to unions
@cindex unions, pointers to

You can create a pointer to a union type just as you can a pointer
to a primitive data type.

@example
@group
union numbers
  @{
    int i;
    float f;
  @};
union numbers foo = @{4@};
union numbers *number_ptr = &foo;
@end group
@end example

That example creates a new union type, @code{union numbers}, and
declares (and initializes the first member of) a variable of that type
named @code{foo}.  Finally, it declares a pointer to the type
@code{union numbers}, and gives it the address of @code{foo}.

You can access the members of a union variable through a pointer, but
you can't use the regular member access operator anymore.  Instead,
you have to use the indirect member access operator (@pxref{Member
Access Expressions}).  Continuing with the previous example, the
following example will change the value of the first member of
@code{foo}:

@example
@group
number_ptr -> i = 450;
@end group
@end example

Now the @code{i} member in @code{foo} is 450.


@node Pointers to Structures
@subsection Pointers to Structures
@cindex pointers to structures
@cindex structures, pointers to

You can create a pointer to a structure type just as you can a pointer
to a primitive data type.

@example
@group
struct fish
  @{
    float length, weight;
  @};
struct fish salmon = @{4.3, 5.8@};
struct fish *fish_ptr = &salmon;
@end group
@end example

That example creates a new structure type, @code{struct fish}, and
declares (and initializes) a variable of that type named @code{salmon}.
Finally, it declares a pointer to the type @code{struct fish}, and
gives it the address of @code{salmon}.

You can access the members of a structure variable through a pointer,
but you can't use the regular member access operator anymore.
Instead, you have to use the indirect member access operator
(@pxref{Member Access Expressions}).  Continuing with the previous
example, the following example will change the values of the members
of @code{salmon}:

@example
@group
fish_ptr -> length = 5.1;
fish_ptr -> weight = 6.2;
@end group
@end example

Now the @code{length} and @code{width} members in @code{salmon} are
5.1 and 6.2, respectively.


@c ----------------------------------------------------------------------------

@node Incomplete Types
@section Incomplete Types
@cindex incomplete types
@cindex types, incomplete
@cindex structures, incomplete
@cindex enumerations, incomplete
@cindex unions, incomplete

You can define structures, unions, and enumerations without listing their
members (or values, in the case of enumerations).  Doing so results in
an incomplete type.  You can't declare variables of incomplete types, but
you can work with pointers to those types.

@example
@group
struct point;
@end group
@end example

At some time later in your program you will want to complete
the type.  You do this by defining it as you usually would:

@example
@group
struct point
  @{
    int x, y;
  @};
@end group
@end example

This technique is commonly used to for linked lists:

@example
@group
struct singly_linked_list
  @{
    struct singly_linked_list *next;
    int x;
    /* other members here perhaps */
  @};
struct singly_linked_list *list_head;
@end group
@end example


@c ----------------------------------------------------------------------------
@node Type Qualifiers
@section Type Qualifiers
@cindex type qualifiers
@cindex qualifiers, type
@cindex @code{const} type qualifier
@cindex @code{volatile} type qualifier
@c ANSI C89, section 6.5.3. ``Type Qualifiers''.
There are two type qualifiers that you can prepend to your variable declarations
which change how the variables may be accessed:  @code{const} and @code{volatile}.

@code{const} causes the variable to be read-only; after initialization, its
value may not be changed.

@example
const float pi = 3.14159f;
@end example

@noindent
In addition to helping to prevent accidental value changes, declaring variables
with @code{const} can aid the compiler in code optimization.

@code{volatile} tells the compiler that the variable is explicitly changeable,
and seemingly useless accesses of the variable (for instance, via pointers) should
not be optimized away.  You might use @code{volatile} variables to store data
that is updated via callback functions or signal handlers.
@ref{Sequence Points and Signal Delivery}.

@example
volatile float currentTemperature = 40.0;
@end example

@c ----------------------------------------------------------------------------
@node Storage Class Specifiers
@section Storage Class Specifiers
@cindex storage class specifiers
@cindex specifiers, storage class
@cindex @code{auto} storage class specifier
@cindex @code{extern} storage class specifier
@cindex @code{register} storage class specifier
@cindex @code{static} storage class specifier

There are four storage class specifiers that you can prepend to your variable
declarations which change how the variables are stored in memory:
@code{auto}, @code{extern}, @code{register}, and @code{static}.

You use @code{auto} for variables which are local to a function, and whose
values should be discarded upon return from the function in which they are
declared.  This is the default behavior for variables declared within functions.

@example
@group
void
foo (int value)
@{
  auto int x = value;
  @dots{}
  return;
@}
@end group
@end example

@code{register} is nearly identical in purpose to @code{auto}, except that
it also suggests to the compiler that the variable will be heavily used, and,
if possible, should be stored in a register.  You cannot use the
address-of operator to obtain the address of a variable declared with
@code{register}.  This means that you cannot refer to the elements of
an array declared with storage class @code{register}.  In fact the
only thing you can do with such an array is measure its size with
@code{sizeof}.  GCC normally makes good choices about which values to
hold in registers, and so @code{register} is not often used.

@code{static} is essentially the opposite of @code{auto}: when applied to
variables within a function or block, these variables will retain their
value even when the function or block is finished.   This is known as
@dfn{static storage duration}.

@example
@group
int
sum (int x)
@{
  static int sumSoFar = 0;
  sumSoFar = sumSoFar + x;
  return sumSoFar;
@}
@end group
@end example

@noindent
You can also declare variables (or functions) at the top level (that
is, not inside a function) to be @code{static}; such variables are
visible (global) to the current source file (but not other source
files).  This gives an unfortunate double meaning to @code{static};
this second meaning is known as @dfn{static linkage}.  Two functions
or variables having static linkage in separate files are entirely
separate; neither is visible outside the file in which it is declared.

Uninitialized variables that are declared as @code{extern} are given
default values of @code{0}, @code{0.0}, or @code{NULL}, depending on
the type.  Uninitialized variables that are declared as @code{auto} or
@code{register} (including the default usage of @code{auto}) are left
uninitialized, and hence should not be assumed to hold any particular
value.

@code{extern} is useful for declaring variables that you want to be visible to
all source files that are linked into your project.  You cannot initialize a
variable in an @code{extern} declaration, as no space is actually allocated
during the declaration.  You must make both an @code{extern} declaration
(typically in a header file that is included by the other source files which
need to access the variable) and a non-@code{extern} declaration which is where
space is actually allocated to store the variable.  The @code{extern} declaration
may be repeated multiple times.

@example
@group
extern int numberOfClients;

@dots{}

int numberOfClients = 0;
@end group
@end example

@xref{Program Structure and Scope}, for related information.

@c ----------------------------------------------------------------------------
@node Renaming Types
@section Renaming Types
@cindex renaming types
@cindex types, renaming

Sometimes it is convenient to give a new name to a type.  You can do this using
the @code{typedef} statement.  @xref{The typedef Statement}, for more information.
