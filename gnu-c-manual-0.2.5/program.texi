
@c This is part of The GNU C Reference Manual
@c Copyright (C) 2007-2009 Free Software Foundation, Inc.
@c See the file gnu-c-manual.texi for copying conditions.

@c ----------------------------------------------------------------------------

@node Program Structure and Scope
@chapter Структура Программы и Области

Теперь, когда показаны все из основных элементов программ C, пришло время
взглянуть на общую картину.

@menu
* Program Structure::
* Scope::
@end menu

@node Program Structure
@section Структура Программы
@cindex program structure
@cindex structure, program

Программа C может существовать полностью в пределах одного исходного файла,
но чаще всего, любая нетривиальная программа будет состоять из нескольких
пользовательских заголовочных и исходных файлов, а также включать
в себя связи с файлами из существующих библиотек.

По соглашению, заголовочные файлы (с расширением ``.h'') содержат объявления
переменных и функций, а исходные файлы (с расширением ``.c'') содержат
соответствующие определения.  Исходные файлы могут также хранить объявление,
если эти объявления объектов не предназначаются для использования из кода
других файлов.  Тем не менее, заголовочные файлы почти наверняка не будут
содержать каких-либо определений.

Например, при написании функции, которая вычисляет квадратные корни и
требуется реализация возможности доступа к ней из функций,
определённых не в том же файле, где определена вызываемая функция, тогда
нужно поместить объявление функции в заголовочный файл
(файв с расширением ``.h''):

@example
@group
/* @r{sqrt.h} */

double
computeSqrt (double x);
@end group
@end example

@noindent
Этот заголовочный файл может быть включен в другие исходные файлы, где
требуется использование этой функцию, и не нужно даже знать, как это было
реализовано.

Реализация самой функции, может затем быть помещена в определённый исходный
файл (с расширением имени файла ``.c''):

@example
@group
/* @r{sqrt.c} */
#include "sqrt.h"

double
computeSqrt (double x)
@{
  double result;
  @dots{}
  return result;
@}
@end group
@end example



@node Scope
@section Связывание
@cindex scope

@c на самом деле scope является чем-то еще; это более правильно назвать
@c ``статическое связывание'' (в отличие от внешних связей).

Связывание относится к тому, что части программы ``видят'' объявленный
объект.  Объявленный объект может быть виден только в пределах конкретной
функции, в пределах определенного файла или может быть виден всему набору
файлов, путем включения заголовочных файлов и использования при объявлении
идентификатора @code{extern}.

Если явно не указано иное, объявление, сделанное на верхнем уровне файла
(т.е. не в нутри функции), видно для всего файла, в том числе внутри
функции, но не видно за пределами файла.

Объявления, сделанные внутри функции видны только в пределах этой функции.

Вновь созданные объявления, затеняют предыдущие объявления, например:

@example
@group
int x = 5;
int y = x + 10;
@end group
@end example

@noindent
будет работать, но:

@example
@group
int x = y + 10;
int y = 5;
@end group
@end example

@noindent
не будет.

@xref{Storage Class Specifiers}, для получения дополнительной информации об
изменении связывания объявленных объектов.  Также смотреть
@ref{Static Functions}.

